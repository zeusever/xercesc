INCLUDE (CheckTypeSize) 
INCLUDE (CheckIncludeFiles) 
INCLUDE (CheckFunctionExists) 
INCLUDE (CheckLibraryExists) 
INCLUDE (CheckCXXSourceCompiles) 
INCLUDE (${CMAKE_CURRENT_SOURCE_DIR}/inttypes.cmake)


SET(APP_NO_THREADS TRUE)

CHECK_INCLUDE_FILES(arpa/inet.h HAVE_ARPA_INET_H) 

CHECK_INCLUDE_FILES(netinet/in.h HAVE_NETINET_IN_H) 

CHECK_INCLUDE_FILES(arpa/nameser_compat.h HAVE_ARPA_NAMESER_COMPAT_H)

CHECK_FUNCTION_EXISTS(catclose HAVE_CATCLOSE) 

CHECK_FUNCTION_EXISTS(catgets HAVE_CATGETS) 

CHECK_FUNCTION_EXISTS(catopen HAVE_CATOPEN) 

CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME) 

CHECK_INCLUDE_FILES(CoreServices/CoreServices.h HAVE_CORESERVICES_CORESERVICES_H)

CHECK_INCLUDE_FILES(cpuid.h HAVE_CPUID_H)

CHECK_INCLUDE_FILES(ctype.h HAVE_CTYPE_H)

CHECK_INCLUDE_FILES(dlfcn.h HAVE_DLFCN_H)

CHECK_INCLUDE_FILES(endian.h HAVE_ENDIAN_H)

CHECK_INCLUDE_FILES(errno.h HAVE_ERRNO_H)

CHECK_INCLUDE_FILES(fcntl.h HAVE_FCNTL_H)

CHECK_INCLUDE_FILES(float.h HAVE_FLOAT_H)

CHECK_FUNCTION_EXISTS(ftime HAVE_FTIME)

IF(WIN32)
	SET(CMAKE_REQUIRED_LIBRARIES Ws2_32)
ELSE(WIN32)
	SET(CMAKE_REQUIRED_LIBRARIES socket)
ENDIF(WIN32)

CHECK_FUNCTION_EXISTS(getaddrinfo HAVE_GETADDRINFO)

CHECK_FUNCTION_EXISTS(gethostbyaddr HAVE_GETHOSTBYADDR)

CHECK_FUNCTION_EXISTS(gethostbyname HAVE_GETHOSTBYNAME)

CHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)

CHECK_FUNCTION_EXISTS(socket HAVE_SOCKET)

SET(CMAKE_REQUIRED_LIBRARIES)

CHECK_FUNCTION_EXISTS(getcwd HAVE_GETCWD)

CHECK_INCLUDE_FILES(iconv.h HAVE_ICONV_H)

SET(CMAKE_REQUIRED_LIBRARIES iconv)

CHECK_FUNCTION_EXISTS(iconv HAVE_ICONV)

CHECK_FUNCTION_EXISTS(iconv_close HAVE_ICONV_CLOSE)

CHECK_FUNCTION_EXISTS(iconv_open HAVE_ICONV_OPEN)

SET(CMAKE_REQUIRED_LIBRARIES)

CHECK_INCLUDE_FILES(inttypes.h HAVE_INTTYPES_H)

CHECK_INCLUDE_FILES(langinfo.h HAVE_LANGINFO_H)

CHECK_LIBRARY_EXISTS(nsl "" "" HAVE_LIBNSL) 

CHECK_LIBRARY_EXISTS(socket "" "" HAVE_LIBSOCKET) 

CHECK_INCLUDE_FILES(limits.h HAVE_LIMITS_H)

CHECK_INCLUDE_FILES(locale.h HAVE_LOCALE_H)

CHECK_FUNCTION_EXISTS(localeconv HAVE_LOCALECONV)

CHECK_CXX_SOURCE_COMPILES("int main(){const wchar_t * message = L\"widestring\";return 0;}" HAVE_LSTRING) 

CHECK_INCLUDE_FILES(machine/endian.h HAVE_MACHINE_ENDIAN_H)

CHECK_INCLUDE_FILES(memory.h HAVE_MEMORY_H)

CHECK_FUNCTION_EXISTS(mblen HAVE_MBLEN)

CHECK_FUNCTION_EXISTS(mbrlen HAVE_MBRLEN)

CHECK_FUNCTION_EXISTS(mbsrtowcs HAVE_MBSRTOWCS)

CHECK_FUNCTION_EXISTS(mbstowcs HAVE_MBSTOWCS)

CHECK_FUNCTION_EXISTS(memmove HAVE_MEMMOVE)

CHECK_FUNCTION_EXISTS(memset HAVE_MEMSET)

SET(HAVE_NAMESPACES TRUE)

CHECK_INCLUDE_FILES(netdb.h HAVE_NETDB_H)

CHECK_INCLUDE_FILES(nl_types.h HAVE_NL_TYPES_H)

CHECK_FUNCTION_EXISTS(nl_langinfo HAVE_NL_LANGINFO)

CHECK_FUNCTION_EXISTS(pathconf HAVE_PATHCONF)

CHECK_INCLUDE_FILES(pthread.h HAVE_PTHREAD)

IF(HAVE_PTHREAD)
	CHECK_LIBRARY_EXISTS(pthread "" "" HAVE_PTHREAD) 
ENDIF()

CHECK_FUNCTION_EXISTS(realpath HAVE_REALPATH)

CHECK_FUNCTION_EXISTS(setlocale HAVE_SETLOCALE)

CHECK_INCLUDE_FILES(stdbool.h HAVE_STDBOOL_H)

CHECK_INCLUDE_FILES(stddef.h HAVE_STDDEF_H)

CHECK_INCLUDE_FILES(stdint.h HAVE_STDINT_H)

CHECK_INCLUDE_FILES(stdio.h HAVE_STDIO_H)

CHECK_INCLUDE_FILES(stdlib.h HAVE_STDLIB_H)

SET(HAVE_STD_LIBS TRUE)

SET(HAVE_STD_NAMESPACE TRUE)

CHECK_INCLUDE_FILES(strings.h HAVE_STRINGS_H)

CHECK_INCLUDE_FILES(string.h HAVE_STRING_H)

CHECK_FUNCTION_EXISTS(strcasecmp HAVE_STRCASECMP)

CHECK_FUNCTION_EXISTS(strchr HAVE_STRCHR)

CHECK_FUNCTION_EXISTS(stricmp HAVE_STRICMP)

CHECK_FUNCTION_EXISTS(strdup HAVE_STRDUP)

CHECK_FUNCTION_EXISTS(strncasecmp HAVE_STRNCASECMP)

CHECK_FUNCTION_EXISTS(strnicmp HAVE_STRNICMP)

CHECK_FUNCTION_EXISTS(strrchr HAVE_STRRCHR)

CHECK_FUNCTION_EXISTS(strstr HAVE_STRSTR)

CHECK_FUNCTION_EXISTS(strtol HAVE_STRTOL)

CHECK_FUNCTION_EXISTS(strtoul HAVE_STRTOUL)

CHECK_INCLUDE_FILES(sys/param.h HAVE_SYS_PARAM_H)

CHECK_INCLUDE_FILES(sys/socket.h HAVE_SYS_SOCKET_H)

CHECK_INCLUDE_FILES(sys/stat.h HAVE_SYS_STAT_H)

CHECK_INCLUDE_FILES(sys/timeb.h HAVE_SYS_TIMEB_H)

CHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)

CHECK_INCLUDE_FILES(sys/types.h HAVE_SYS_TYPES_H)

CHECK_FUNCTION_EXISTS(towlower HAVE_TOWLOWER)

CHECK_FUNCTION_EXISTS(towupper HAVE_TOWUPPER)

CHECK_INCLUDE_FILES(sys/socket.h HAVE_SYS_PARAM_H)

CHECK_INCLUDE_FILES(unistd.h HAVE_UNISTD_H)

CHECK_INCLUDE_FILES(wchar.h HAVE_WCHAR_H)

CHECK_FUNCTION_EXISTS(wcsicmp HAVE_WCSICMP)

CHECK_FUNCTION_EXISTS(wcslwr HAVE_WCSLWR)

CHECK_FUNCTION_EXISTS(wcsnicmp HAVE_WCSNICMP)

CHECK_FUNCTION_EXISTS(wcsrtombs HAVE_WCSRTOMBS)

CHECK_FUNCTION_EXISTS(wcsupr HAVE_WCSUPR)

CHECK_INCLUDE_FILES(wctype.h HAVE_WCTYPE_H)

CHECK_INCLUDE_FILES(winsock2.h HAVE_WINSOCK2_H)

SET(ICONV_USES_CONST_POINTER TRUE)

CHECK_TYPE_SIZE(int SIZEOF_INT)

CHECK_TYPE_SIZE(long SIZEOF_LONG)

CHECK_TYPE_SIZE(long long SIZEOF_LONG_LONG)

CHECK_TYPE_SIZE(short SIZEOF_SHORT)

CHECK_TYPE_SIZE(wchar_t SIZEOF_WCHAR_T)

CHECK_TYPE_SIZE(__int64 SIZEOF___INT64)

CHECK_TYPE_SIZE(__int64 SIZEOF___INT64)

SET(STDC_HEADERS TRUE)

IF(HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILES(time.h TIME_WITH_SYS_TIME)
ENDIF()

CHECK_INCLUDE_FILES(emmintrin.h TIME_WITH_SYS_TIME)

CHECK_INCLUDE_FILES(intrin.h XERCES_HAVE_INTRIN_H)

CHECK_INCLUDE_FILES(inttypes.h XERCES_HAVE_INTTYPES_H)

CHECK_INCLUDE_FILES(sys/types.h XERCES_HAVE_SYS_TYPES_H)

CHECK_FUNCTION_EXISTS(__get_cpuid XERCES_HAVE_GETCPUID)

SET(XERCES_LSTRSUPPORT ${HAVE_LSTRING})

SET(XERCES_NEW_IOSTREAMS TRUE)

IF(WIN32)
	SET(XERCES_PATH_DELIMITER_BACKSLASH TRUE)
	SET(XERCES_USE_FILEMGR_WINDOWS TRUE)
	SET(XERCES_USE_WIN32_MSGLOADER TRUE)
	SET(XERCES_USE_MUTEXMGR_WINDOWS TRUE)
	SET(XERCES_USE_NETACCESSOR_WINSOCK TRUE)
	SET(XERCES_USE_TRANSCODER_WINDOWS TRUE)
ELSE()
	SET(XERCES_USE_FILEMGR_POSIX TRUE)
	SET(XERCES_USE_MSGLOADER_ICU TRUE)
	SET(XERCES_USE_MUTEXMGR_POSIX TRUE)
	SET(XERCES_USE_NETACCESSOR_SOCKET TRUE)
	SET(XERCES_USE_TRANSCODER_ICU TRUE)
ENDIF()

IF(${SIZEOF_WCHAR_T} EQUAL 2)
	SET(XERCES_USE_BUILDIN_WCHAR_T 1)
ENDIF()

IF(WIN32)
	SET(SSIZE_T SSIZE_T)
ELSE()
	SET(SSIZE_T ssize_t)
ENDIF()